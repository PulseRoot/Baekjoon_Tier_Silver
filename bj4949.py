# 문자열에 포함되는 괄호는 소괄호("()") 와 대괄호("[]")로 2종류이고, 문자열이 균형을 이루는 조건은 아래와 같다.

# 모든 왼쪽 소괄호("(")는 오른쪽 소괄호(")")와만 짝을 이뤄야 한다.
# 모든 왼쪽 대괄호("[")는 오른쪽 대괄호("]")와만 짝을 이뤄야 한다.
# 모든 오른쪽 괄호들은 자신과 짝을 이룰 수 있는 왼쪽 괄호가 존재한다.
# 모든 괄호들의 짝은 1:1 매칭만 가능하다. 즉, 괄호 하나가 둘 이상의 괄호와 짝지어지지 않는다.
# 짝을 이루는 두 괄호가 있을 때, 그 사이에 있는 문자열도 균형이 잡혀야 한다.

# 하나 또는 여러줄에 걸쳐서 문자열이 주어진다. 
# 각 문자열은 영문 알파벳, 공백, 소괄호("( )") 대괄호("[ ]")등으로 이루어져 있으며, 길이는 100글자보다 작거나 같다.
# 입력의 종료조건으로 맨 마지막에 점 하나(".")가 들어온다.
# 각 줄마다 해당 문자열이 균형을 이루고 있으면 "yes"를, 아니면 "no"를 출력한다.

while (True) :
    I = input()
    stack = []
                   #I의 값에 .이 들어올때까지 입력을 받음
    if I == "." :
        break

    for i in I :    #I라는 문자열을 처음부터 끝까지
        if i == '[' or i == '(' :  #만약 인덱스가 [ 나 ( 라면
            stack.append(i)        #스택에 추가
        elif i == ']' :            #만약 ] 일때,
            if len(stack) != 0 and stack[-1] == '[' : #만약 스택이 길이가 1이 아니고 마지막에 저장된 문자가 [ 라면 
                stack.pop()  #스택에서 이전값을 제거해준다.
            else :           #아니라면
                stack.append(']') #추가해주고 오류이므로 탈출한다.
                break
        elif i == ')' : #대괄호와 같다.
            if len(stack) != 0 and stack[-1] == '(' :
                stack.pop()
            else :
                stack.append(')')
                break
    if len(stack) == 0 : #스택에 남은 문자가 없다면 yes
        print('yes')
    else :  #남은 문자가 있다면 no를 출력한다
        print('no')   